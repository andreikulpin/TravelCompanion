package com.kulpin.project.travelcompanion;import android.app.DialogFragment;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.support.design.widget.AppBarLayout;import android.os.Bundle;import android.support.design.widget.CoordinatorLayout;import android.support.v4.view.ViewCompat;import android.support.v7.widget.CardView;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.util.Log;import android.util.TypedValue;import android.view.ContextMenu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.GridView;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import com.kulpin.project.travelcompanion.adapter.DocumentListAdapter;import com.kulpin.project.travelcompanion.adapter.GridViewAdapter;import com.kulpin.project.travelcompanion.controller.PhotoController;import com.kulpin.project.travelcompanion.dto.Document;import com.kulpin.project.travelcompanion.dto.EventDTO;import com.kulpin.project.travelcompanion.dto.Link;import com.kulpin.project.travelcompanion.dto.Photo;import com.kulpin.project.travelcompanion.interactive.NewLinkDialogFragment;import com.kulpin.project.travelcompanion.utilities.Constants;import com.kulpin.project.travelcompanion.utilities.DBHelper;import com.kulpin.project.travelcompanion.controller.EventController;import com.kulpin.project.travelcompanion.utilities.FilePath;import com.kulpin.project.travelcompanion.utilities.GalleryUtilities;import java.text.SimpleDateFormat;import java.util.ArrayList;public class EventContentActivity extends BasicActivity {    private static final int LAYOUT = R.layout.activity_event_content;    private long eventId;    private EventDTO event;    private EventController eventController;    private AppBarLayout appBarLayout;    private Toolbar toolbar;    private ProgressBar progressBar;    private TextView mTextPlace;    private TextView mTextDate;    private ImageView image;    private CardView buttonAttachDocument;    private RecyclerView recyclerView;    private LinearLayout linksContainer;    private int longClickObjectType;    private int longClickIndex;    private CardView gallery;    private GridView gridView;    private CardView buttonAllPhotos;    private CardView buttonAttachPhoto;    private View viewContent;    private ArrayList<Document> documentList;    private DocumentListAdapter documentListAdapter;    private ArrayList<Link> linkList;    //private ArrayList<Photo> photoList;    //private GalleryUtilities galleryUtilities;    private GridViewAdapter gridViewAdapter;    //private DBHelper dbHelper;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(LAYOUT);        bindActivity();        initToolbar();        initDocuments();        initLinks();        initGallery();        setActivityCover();        //initNavigationView();        //Log.d("tclog", "onCreate");\    }    @Override    protected void onResume() {        super.onResume();        //Log.d("tclog", "onResume");        initGallery();        setActivityCover();    }    public static void start(Context context, long eventId, int eventType){        Intent intent = new Intent(context, EventContentActivity.class);        intent.putExtra("eventId", eventId);        intent.putExtra("eventType", eventType);        context.startActivity(intent);    }    private void bindActivity(){        this.eventId = getIntent().getLongExtra("eventId", 0);        eventController = new EventController(this);        eventController.getEventById(eventId);        progressBar = (ProgressBar) findViewById(R.id.progress_content);        progressBar.setVisibility(View.VISIBLE);        appBarLayout = (AppBarLayout) findViewById(R.id.appBar_content);        toolbar = (Toolbar) findViewById(R.id.toolbar_content);        //mTextPlace = (TextView)findViewById(R.id.textPlace);        //mTextDate = (TextView)findViewById(R.id.textDate);        dbHelper = new DBHelper(this);        galleryUtilities = new GalleryUtilities(this);        image = (ImageView)findViewById(R.id.image);        gallery = (CardView) findViewById(R.id.cardview_gallery_content);        gridView = (GridView) findViewById(R.id.grid_view);        photoController = new PhotoController(this);        longClickObjectType = Constants.LONG_CLICK_DOCUMENT;        buttonAttachDocument = (CardView) findViewById(R.id.cardView_attach_document);        buttonAttachDocument.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent();                intent.setType("*/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select File"), Constants.RequestCodes.PICK_FILE_REQUEST);            }        });        buttonAllPhotos = (CardView) findViewById(R.id.cardView_all_photos);        buttonAllPhotos.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startGalleryActivity();            }        });        buttonAttachPhoto = (CardView) findViewById(R.id.cardView_attach_photo);        buttonAttachPhoto.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent();                intent.setType("*/*");                intent.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(intent, "Select Picture"), Constants.RequestCodes.PICK_IMAGE_REQUEST);            }        });        findViewById(R.id.cardView_attach_link).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                final DialogFragment dialogFragment = new NewLinkDialogFragment();                dialogFragment.show(getFragmentManager(), "link");            }        });    }    private void startGalleryActivity(){        GalleryActivity.start(this, eventId, event.getTitle());    }    public void initToolbar(){        toolbar.setNavigationIcon(R.mipmap.ic_arrow_left_white_24dp);        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                onBackPressed();            }        });        toolbar.inflateMenu(R.menu.menu_content);        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {            @Override            public boolean onMenuItemClick(MenuItem item) {                switch (item.getItemId()) {                    case R.id.refresh_content: {                        if (((LinearLayout) findViewById(R.id.content_container)).getChildCount() > 0){                            ((LinearLayout) findViewById(R.id.content_container)).removeAllViews();                        }                        if (linksContainer.getChildCount() > 0){                            linksContainer.removeAllViews();                            linkList.clear();                        }                        eventController.getEventById(eventId);                        eventController.syncLinks(eventId);                        progressBar.setVisibility(View.VISIBLE);                    }                    break;                    case R.id.download_photos:                        progressBar.setVisibility(View.VISIBLE);                        photoController.downloadAllPhotos(eventId);                        break;                    case R.id.attach_photo: {                        Intent intent = new Intent();                        intent.setType("*/*");                        intent.setAction(Intent.ACTION_GET_CONTENT);                        startActivityForResult(Intent.createChooser(intent, "Select Picture"), Constants.RequestCodes.PICK_IMAGE_REQUEST);                    }                    break;                    case R.id.menu_attach_link:{                        final DialogFragment dialogFragment = new NewLinkDialogFragment();                        dialogFragment.show(getFragmentManager(), "link");                    }                    case R.id.clear_gallery: {                        dbHelper.deleteAllPhotos(eventId);                        photoList.clear();                        gridViewAdapter.notifyDataSetChanged();                        setActivityCover();                        photoController.deleteAllPhotos(eventId);                    }                    break;                    case R.id.clear_local_gallery: {                        dbHelper.deleteAllPhotos(eventId);                        photoList.clear();                        gridViewAdapter.notifyDataSetChanged();                        setActivityCover();                    }                    break;                    case R.id.clear_documents:{                        dbHelper.deleteAllDocuments(eventId);                        documentList.clear();                        documentListAdapter.notifyDataSetChanged();                    }                    break;                }                return false;            }        });    }    /*setting of TextViews with the data from event*/    public void setEvent(EventDTO event){        this.event = event;        toolbar.setTitle(event.getTitle());        //mTextPlace.setText(event.getPlace());        //mTextDate.setText((new SimpleDateFormat("dd.MM.yyyy")).format(event.getStartDate().getTime()));        switch (event.getType()){            case Constants.EventType.TYPE_PLANE:                setEventMove();                break;            case Constants.EventType.TYPE_TRAIN:                setEventMove();                break;            case Constants.EventType.TYPE_BUS:                setEventMove();                break;            case Constants.EventType.TYPE_MUSEUM:                setEventLocal();                break;            case Constants.EventType.TYPE_CINEMA:                setEventLocal();                break;        }        progressBar.setVisibility(View.INVISIBLE);    }    public void setEventMove(){        viewContent = getLayoutInflater().inflate(R.layout.event_content_move, (LinearLayout)findViewById(R.id.content_container), true);        ((TextView) viewContent.findViewById(R.id.content_text_place_departure)).setText(event.getDeparturePlace());        ((TextView) viewContent.findViewById(R.id.content_text_time_departure)).setText((new SimpleDateFormat("HH:mm")).format(event.getStartTime().getTime()));        ((TextView) viewContent.findViewById(R.id.content_text_date_departure)).setText((new SimpleDateFormat("dd.MM.yy")).format(event.getStartDate().getTime()));        ((TextView) viewContent.findViewById(R.id.content_text_place_destination)).setText(event.getDestinationPlace());        ((TextView) viewContent.findViewById(R.id.content_text_time_destination)).setText((new SimpleDateFormat("HH:mm")).format(event.getEndDate().getTime()));        ((TextView) viewContent.findViewById(R.id.content_text_date_destination)).setText((new SimpleDateFormat("dd.MM.yy")).format(event.getEndDate().getTime()));    }    public void setEventLocal(){        viewContent = getLayoutInflater().inflate(R.layout.event_content_local, (LinearLayout)findViewById(R.id.content_container), true);        ((TextView) viewContent.findViewById(R.id.content_text_place)).setText(event.getPlace());        ((TextView) viewContent.findViewById(R.id.content_text_time_start)).setText((new SimpleDateFormat("HH:mm")).format(event.getStartTime().getTime()));        ((TextView) viewContent.findViewById(R.id.content_text_time_end)).setText((new SimpleDateFormat("HH:mm")).format(event.getEndTime().getTime()));        ((TextView) viewContent.findViewById(R.id.content_text_date)).setText((new SimpleDateFormat("dd.MM.yy")).format(event.getStartDate().getTime()));    }    /*document list initialization*/    private void initDocuments(){        documentList = dbHelper.getDocumentsByEventId(eventId);        recyclerView = (RecyclerView) findViewById(R.id.recycleView_documents);        recyclerView.setLayoutManager(new LinearLayoutManager(getApplicationContext()));        documentListAdapter = new DocumentListAdapter(documentList, this);        recyclerView.setAdapter(documentListAdapter);    }    private void initLinks(){        linkList = new ArrayList<>();        eventController.syncLinks(eventId);    }    public void addLink(final Link newLink){        linkList.add(newLink);        linksContainer = (LinearLayout) getLayoutInflater().inflate(R.layout.item_list_links, (LinearLayout)findViewById(R.id.content_container_links), true);        CardView link = (CardView) linksContainer.getChildAt(linkList.indexOf(newLink));        ((TextView) link.findViewById(R.id.item_list_links_title)).setText(newLink.getTitle());        ((TextView) link.findViewById(R.id.item_list_links_address)).setText(newLink.getAddress());        link.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String URL = newLink.getAddress();                if (!URL.startsWith("https://") && !URL.startsWith("http://")){                    URL = "http://" + URL;                }                Intent intent = new Intent(Intent.ACTION_VIEW);                intent.setData(Uri.parse(URL));                startActivity(intent);            }        });        link.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {                longClickObjectType = Constants.LONG_CLICK_LINK;                longClickIndex = linkList.indexOf(newLink);                return false;            }        });        registerForContextMenu(link);    }    /*photos grid initialization*/    private void initGallery() {        Log.d("tclog", "initGallery");        photoList = dbHelper.getPhotosByEventId(eventId);        while(photoList.size() > 3) photoList.remove(photoList.size() - 1);        float padding = galleryUtilities.convertDIPtoPXL(Constants.GRID_PADDING);        int columnWidth = galleryUtilities.getColumnWidth();        gridView.setNumColumns(Constants.NUM_COLUMNS);        gridView.setColumnWidth(columnWidth);        gridView.setStretchMode(GridView.NO_STRETCH);        gridView.setPadding((int) padding, (int) padding, (int) padding, (int) padding);        gridView.setHorizontalSpacing((int) padding);        gridView.setVerticalSpacing((int) padding);        gridViewAdapter = new GridViewAdapter(this, photoList, columnWidth);        gridView.setAdapter(gridViewAdapter);    }    private void setActivityCover(){        if(photoList.isEmpty()){            ViewCompat.setNestedScrollingEnabled(findViewById(R.id.content_nested_scroll_view), true);            appBarLayout.setExpanded(false);            appBarLayout.setActivated(false);            gallery.setVisibility(View.INVISIBLE);            buttonAllPhotos.setVisibility(View.INVISIBLE);            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);            buttonAttachPhoto.setLayoutParams(params);            image.setImageBitmap(null);            return;        } else {            ViewCompat.setNestedScrollingEnabled(findViewById(R.id.content_nested_scroll_view), true);            appBarLayout.setExpanded(true);            appBarLayout.setActivated(false);            gallery.setVisibility(View.VISIBLE);            buttonAllPhotos.setVisibility(View.VISIBLE);            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT, 1);            buttonAttachPhoto.setLayoutParams(params);        }        Bitmap bitmap = GalleryUtilities.decodeBitmapFromResource(photoList.get(0).getPhotoPath(), galleryUtilities.getScreenWidth(), galleryUtilities.getScreenWidth());        image.setImageBitmap(bitmap);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == Constants.RequestCodes.PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {            String selectedImagePath;            Uri selectedImageUri = data.getData();            selectedImagePath = FilePath.getPath(getApplicationContext(), selectedImageUri);            Photo photo = new Photo(eventId, "new", selectedImagePath);            //dbHelper.insertPhoto(photo);            photoController.uploadImage(photo);        }        if (requestCode == Constants.RequestCodes.PICK_FILE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null) {            String selectedFilePath;            Uri selectedFileUri = data.getData();            selectedFilePath = FilePath.getPath(getApplicationContext(), selectedFileUri);            Document document = new Document(eventId, selectedFileUri.getLastPathSegment(), selectedFilePath);            documentList.add(document);            dbHelper.insertDocument(document);            documentListAdapter.notifyDataSetChanged();        }    }    @Override    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {        super.onCreateContextMenu(menu, v, menuInfo);        getMenuInflater().inflate(R.menu.menu_context, menu);        menu.removeItem(R.id.edit_context);    }    @Override    public boolean onContextItemSelected(MenuItem item) {        switch (longClickObjectType) {            case (Constants.LONG_CLICK_DOCUMENT):                switch (item.getItemId()) {                    case R.id.delete_context: {                        int position = documentListAdapter.getSelectedPosition();                        dbHelper.deleteDocument(documentList.get(position).getId());                        documentList.remove(position);                        documentListAdapter.notifyDataSetChanged();                    }                    break;                }                break;            case (Constants.LONG_CLICK_LINK):                switch (item.getItemId()) {                    case R.id.delete_context: {                        eventController.deleteLink(linkList.get(longClickIndex).getId());                        linkList.remove(longClickIndex);                        linksContainer.removeViewAt(longClickIndex);                    }                    break;                }                break;        }        longClickObjectType = Constants.LONG_CLICK_DOCUMENT;        return super.onContextItemSelected(item);    }    @Override    public void addPhotoToLocalDB(Photo photo) {        dbHelper.insertPhoto(photo);    }    @Override    public void updatePhotos() {        initGallery();        setActivityCover();        progressBar.setVisibility(View.INVISIBLE);    }    @Override    public boolean isPhotoExistsLocally(long photoId) {        return dbHelper.isPhotoExists(photoId);    }    @Override    public void onDialogPositiveClick(DialogFragment dialog, Link link) {        link.setEventId(eventId);        eventController.uploadLink(link);    }    @Override    public void onDialogNegativeClick(DialogFragment dialog) {    }}